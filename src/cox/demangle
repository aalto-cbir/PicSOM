// -*- C++ -*-

// $Id: demangle,v 1.2 2017/11/03 18:26:37 jormal Exp $	

#ifndef _cox_demangle_
#define _cox_demangle_

#include <string>
#include <typeinfo>

using std::string;
using std::type_info;

#ifdef __GNUC__
#include <cxxabi.h>
#endif // __GNUC__

namespace cox {
  /// 
  /// cox::demangle demangles C++ names.
  /// 

  ///
  static string __attribute__((unused)) demangle(const type_info& i) {
#ifndef __GNUC__
    return i.name();
#else // __GNUC_
    // string n = i.name();
    // if (n=="d") return "double";
    // if (n=="f") return "float";
    // if (n=="i") return "int";
    // if (n=="j") return "unsigned int";
    // string tn = string("_Z")+n;
    string tn = i.name();
    char buf[100] = "???";
    size_t len = sizeof buf;
    int st = 0;
    abi::__cxa_demangle(tn.c_str(), buf, &len, &st);
    return buf;
#endif // __GNUC__
  }

  ///
  template <class T>
  string type_info_name(bool dmgl = true) {
    const type_info& i = typeid(T);
    return dmgl ? demangle(i) : i.name();
  }

} // namespace cox

#endif // _cox_demangle_
